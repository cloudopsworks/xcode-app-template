##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Continuous deployment to target environment
on:
  workflow_call:
    inputs:
      deployment_name:
        description: 'Deployment Name'
        required: true
        type: string
      cloud:
        description: 'Cloud Provider'
        required: true
        type: string
      cloud_type:
        description: 'Cloud Type: kubernetes/eks/beanstalk/function etc.'
        required: true
        type: string
      runner_set:
        description: 'Runner Set'
        required: true
        type: string
      default_aws_region:
        description: 'Default AWS Region'
        required: false
        type: string
        default: ''
      default_aws_sts_role_arn:
        description: 'Default AWS STS Role ARN'
        required: false
        type: string
        default: ''
      terraform_state_conf:
        description: 'Terraform State Configuration'
        required: true
        type: string
      semver:
        description: 'Semver Version'
        required: true
        type: string
      default_azure_rg:
        description: 'Default Azure Resource Group'
        required: false
        type: string
        default: ''
      apis_enabled:
        description: 'API Gateway Enabled'
        required: false
        type: boolean
        default: false
    secrets:
      token:
        description: 'GitHub Token'
        required: true
      aws_access_key_id:
        description: 'AWS Access Key ID'
        required: false
      aws_secret_access_key:
        description: 'AWS Secret Access Key'
        required: false
      azure_service_id:
        description: 'Azure Service Principal ID'
        required: false
      azure_service_secret:
        description: 'Azure Service Principal Secret'
        required: false

jobs:
  deploy-apis:
    name: 'Deploy APIS into environment - Branch: ${{ github.ref_name }} - Env: ${{ inputs.deployment_name }}'
    runs-on: ${{ inputs.runner_set }}
    if: ${{ inputs.apis_enabled }}
    environment: ${{ inputs.deployment_name }}
    steps:
      - name: Checkout w/Blueprint
        uses: cloudopsworks/blueprints/cd/checkout@v5
        with:
          blueprint_ref: 'v5'

      # Get Pipeline Config
      - name: Get Pipeline Config
        id: config
        uses: ./bp/ci/config

      - name: Deploy API AWS
        if: ${{ inputs.cloud == 'AWS' }}
        uses: ./bp/cd/deploy/api/aws
        with:
          token: ${{ secrets.token }}
          aws_region: ${{ steps.config.outputs.aws_region != '' && steps.config.outputs.aws_region || inputs.default_aws_region }}
          aws_sts_role_arn: ${{ steps.config.outputs.deploy_aws_sts_role_arn != '' && steps.config.outputs.deploy_aws_sts_role_arn || inputs.default_aws_sts_role_arn }}
          aws_access_key_id: ${{ secrets.aws_access_key_id }}
          aws_secret_access_key: ${{ secrets.aws_secret_access_key }}
          terraform_state_conf: ${{ inputs.terraform_state_conf }}
          release_name: ${{ steps.config.outputs.release_name }}
          release_version: ${{ inputs.semver }}
          project_key: ${{ steps.config.outputs.project_key }}
          deployment_name: ${{ inputs.deployment_name }}
          environment: ${{ steps.config.outputs.environment }}

#      - name: Deploy API Azure
#        if: ${{ inputs.cloud == 'AZURE' }}
#        uses: ./bp/cd/deploy/api/azure
#        with:
#          token: ${{ secrets.token }}

#      - name: Deploy API GoogleCloud
#        if: ${{ inputs.cloud == 'GCP' }}
#        uses: ./bp/cd/deploy/api/gcp
#        with:
#          token: ${{ secrets.token }}

  deploy-single:
    name: 'Deploy - Branch: ${{ github.ref_name }} - Env: ${{ inputs.deployment_name }}'
    runs-on: ${{ inputs.runner_set }}
    environment: ${{ inputs.deployment_name }}
    steps:
      - name: Checkout w/Blueprint
        uses: cloudopsworks/blueprints/cd/checkout@v5
        with:
          blueprint_ref: 'v5'

      # Get Pipeline Config
      - name: Get Pipeline Config
        id: config
        uses: ./bp/ci/config

      - name: Deploy AWS
        if: ${{ inputs.cloud == 'AWS' }}
        uses: ./bp/cd/deploy/app/aws
        with:
          cloud_type: ${{ inputs.cloud_type }}
          token: ${{ secrets.token }}
          aws_region: ${{ steps.config.outputs.aws_region != '' && steps.config.outputs.aws_region || inputs.default_aws_region }}
          aws_sts_role_arn: ${{ steps.config.outputs.deploy_aws_sts_role_arn != '' && steps.config.outputs.deploy_aws_sts_role_arn || inputs.default_aws_sts_role_arn }}
          aws_access_key_id: ${{ secrets.aws_access_key_id }}
          aws_secret_access_key: ${{ secrets.aws_secret_access_key }}
          terraform_state_conf: ${{ inputs.terraform_state_conf }}
          release_name: ${{ steps.config.outputs.release_name }}
          release_version: ${{ inputs.semver }}
          project_key: ${{ steps.config.outputs.project_key }}
          deployment_name: ${{ inputs.deployment_name }}
          environment: ${{ steps.config.outputs.environment }}

      - name: Deploy Azure
        if: ${{ inputs.cloud == 'AZURE' }}
        uses: ./bp/cd/deploy/app/azure
        with:
          cloud_type: ${{ inputs.cloud_type }}
          token: ${{ secrets.token }}
          azure_service_id: ${{ secrets.azure_service_id }}
          azure_service_secret: ${{ secrets.azure_service_secret }}
          azure_rg: ${{ steps.config.outputs.azure_rg != '' && steps.config.outputs.azure_rg || inputs.default_azure_rg }}
          terraform_state_conf: ${{ inputs.terraform_state_conf }}
          release_name: ${{ steps.config.outputs.release_name }}
          release_version: ${{ inputs.semver }}
          project_key: ${{ steps.config.outputs.project_key }}
          deployment_name: ${{ inputs.deployment_name }}
          environment: ${{ steps.config.outputs.environment }}

#      - name: Deploy GCP
#        if: ${{ inputs.cloud == 'GCP' }}
#        uses: ./bp/cd/deploy/app/azure
#        with:
#          cloud_type: ${{ inputs.cloud_type }}
#          token: ${{ secrets.token }}
#          gcp_service_id: ${{ secrets.gcp_service_id }}
#          terraform_state_conf: ${{ inputs.terraform_state_conf }}
#          release_name: ${{ steps.config.outputs.release_name }}
#          release_version: ${{ inputs.semver }}
#          project_key: ${{ steps.config.outputs.project_key }}
#          deployment_name: ${{ inputs.deployment_name }}
#          environment: ${{ steps.config.outputs.environment }}

##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Release Build
on:
  # Run on create - but only on the support and release branches
  create:
  # Run only on branches PUSH except when charts are modified
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+**'
    branches:
      - develop
      - support/**
      - release/**
    paths-ignore:
      - '.github/**'
      - '!.github/vars/**'
      - '!.github/values/**'
  workflow_dispatch:

concurrency: build-${{ github.repository }}-${{ github.ref }}

# Permission Settings for the entire RUN
permissions:
  actions: write
  contents: write
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  code-build:
    name: 'Code Build - Branch: ${{ github.ref_name }}'
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'create' && 
      (startsWith(github.ref, 'refs/heads/support/') || startsWith(github.ref, 'refs/heads/release/')) ||
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    outputs:
      is_release: ${{ steps.config.outputs.is_release }}
      is_pre_release: ${{ steps.config.outputs.is_pre_release }}
      semver: ${{ steps.build.outputs.semver }}
      deployment_name: ${{ steps.config.outputs.deployment_name }}
      target_cloud: ${{ steps.config.outputs.target_cloud }}
      deployment_enabled: ${{ steps.config.outputs.deployment_enabled }}
      cloud: ${{ steps.config.outputs.cloud }}
      cloud_type: ${{ steps.config.outputs.cloud_type }}
      runner_set: ${{ steps.config.outputs.runner_set != '' && steps.config.outputs.runner_set || vars.DEPLOYMENT_RUNNER_SET }}
      project_key: ${{ steps.config.outputs.project_key }}
      project_owner: ${{ steps.config.outputs.project_owner }}
    steps:
      - name: Checkout w/Blueprint
        uses: cloudopsworks/blueprints/cd/checkout@v5
        with:
          blueprint_ref: 'v5'

      - name: Pipeline Configuration
        id: config
        uses: ./bp/ci/config

      - name: Build XCode Project
        id: build
        uses: ./bp/ci/xcode/build
        with:
          bot_user: ${{ vars.BOT_USER }}
          token: ${{ secrets.BOT_TOKEN }}

#      - name: Deploy Component
#        if: steps.config.outputs.is_library == 'true'
#        uses: ./bp/ci/xcode/deploy
#        with:
#          bot_user: ${{ vars.BOT_USER }}
#          token: ${{ secrets.BOT_TOKEN }}

      - name: Save Build Artifacts
        uses: ./bp/ci/xcode/artifacts

#      - name: Save Api Artifacts
#        if: steps.config.outputs.apis_enabled == 'true'
#        uses: ./bp/ci/api/artifacts

#      - name: Build & Save Container
#        if: steps.config.outputs.container_enabled == 'true'
#        uses: ./bp/ci/nodejs/container
#        with:
#          semver: ${{ steps.build.outputs.semver }}
#          node_version: ${{ steps.build.outputs.node_version }}
#          node_dist: ${{ steps.build.outputs.node_dist }}
#          node_image_variant: ${{ steps.build.outputs.node_image_variant }}
#          environment: ${{ steps.config.outputs.environment }}
#          is_release: ${{ steps.config.outputs.is_release }}
#          default_registry_address: ${{ vars.DOCKER_REGISTRY_ADDRESS }}
#          project_key: ${{ steps.config.outputs.project_key }}
#          project_owner: ${{ steps.config.outputs.project_owner }}

#  deploy-container:
#    needs:
#      - code-build
#    if: ${{ needs.code-build.outputs.container_enabled == 'true' && needs.code-build.outputs.deployment_enabled == 'true' && needs.code-build.outputs.is_library != 'true' }}
#    uses: ./.github/workflows/deploy-container.yml
#    with:
#      deployment_name: ${{ needs.code-build.outputs.deployment_name }}
#      cloud: ${{ needs.code-build.outputs.cloud }}
#      cloud_type: ${{ needs.code-build.outputs.cloud_type }}
#      runner_set: ${{ needs.code-build.outputs.runner_set }}
#      default_aws_region: ${{ vars.BUILD_AWS_REGION }}
#      default_aws_sts_role_arn: ${{ vars.BUILD_AWS_STS_ROLE_ARN }}
#      default_azure_rg: ${{ vars.BUILD_AZURE_RG }}
#      default_registry_address: ${{ vars.DOCKER_REGISTRY_ADDRESS }}
#      project_key: ${{ needs.code-build.outputs.project_key }}
#      project_owner: ${{ needs.code-build.outputs.project_owner }}
#    secrets:
#      token: ${{ secrets.BOT_TOKEN }}
#      aws_access_key_id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
#      aws_secret_access_key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
#      azure_service_id: ${{ secrets.BUILD_AZURE_SERVICE_ID }}
#      azure_service_secret: ${{ secrets.BUILD_AZURE_SERVICE_SECRET }}

  release:
    name: 'Generate Release'
    needs:
      - code-build
#      - deploy-container
    runs-on: ubuntu-latest
    if: |
      (needs.code-build.result == 'success') &&
      (needs.code-build.outputs.is_release == 'true')
    steps:
      - name: Checkout w/Blueprint
        uses: cloudopsworks/blueprints/cd/checkout@v5
        id: co
        with:
          blueprint_ref: 'v5'

      - name: Perform Release
        uses: ./bp/cd/release
        with:
          source_path: ${{ steps.co.outputs.source_path }}
          ref_name: ${{ needs.code-build.outputs.semver }}
          release_tag: ${{ needs.code-build.outputs.semver }}
          is_pre_release: ${{ needs.code-build.outputs.is_pre_release == 'true' }}
          files_globs: |
            *.zip
            *.jar
          token: ${{ secrets.BOT_TOKEN }}

  scan:
    name: 'Code Scan SAST/SCA/DAST'
    needs:
      - code-build
#      - deploy-container
    if: needs.code-build.result == 'success'
    uses: ./.github/workflows/scan.yml
    with:
      deployment_name: ${{ needs.code-build.outputs.deployment_name }}
      bot_user: ${{ vars.BOT_USER }}
      sonarqube_url: ${{ vars.SONARQUBE_URL }}
      dtrack_url: ${{ vars.DEPENDENCYTRACK_URL }}
      default_runner_set: ${{ vars.DEPLOYMENT_RUNNER_SET }}
    secrets:
      token: ${{ secrets.BOT_TOKEN }}
      sonarqube_token: ${{ secrets.SONARQUBE_TOKEN }}
      snyk_token: ${{ secrets.SNYK_TOKEN }}
      semgrep_token: ${{ secrets.SEMGREP_TOKEN }}
      dtrack_token: ${{ secrets.DEPENDENCYTRACK_TOKEN }}

  deploy:
    needs:
      - code-build
#      - deploy-container
    if: |
      needs.code-build.result == 'success' &&
      needs.code-build.outputs.deployment_enabled == 'true'
    uses: ./.github/workflows/deploy.yml
    with:
      deployment_name: ${{ needs.code-build.outputs.deployment_name }}
      cloud: ${{ needs.code-build.outputs.cloud }}
      cloud_type: ${{ needs.code-build.outputs.cloud_type }}
      runner_set: ${{ needs.code-build.outputs.runner_set }}
      default_aws_region: ${{ vars.DEPLOYMENT_AWS_REGION }}
      default_aws_sts_role_arn: ${{ vars.DEPLOYMENT_AWS_STS_ROLE_ARN }}
      default_azure_rg: ${{ vars.DEPLOYMENT_AZURE_RG }}
      terraform_state_conf: ${{ vars.DEPLOYMENT_STATE_CONF }}
      semver: ${{ needs.code-build.outputs.semver }}
      apis_enabled: ${{ needs.code-build.outputs.apis_enabled == 'true' }}
    secrets:
      token: ${{ secrets.BOT_TOKEN }}
      aws_access_key_id: ${{ secrets.DEPLOYMENT_AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.DEPLOYMENT_AWS_SECRET_ACCESS_KEY }}
      azure_service_id: ${{ secrets.DEPLOYMENT_AZURE_SERVICE_ID }}
      azure_service_secret: ${{ secrets.DEPLOYMENT_AZURE_SERVICE_SECRET }}
